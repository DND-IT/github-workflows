{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Github Actions is a powerful tool for automating workflows in your repository. This repository contains a collection of GitHub workflows that are reusable across projects.</p> <p>Reusable workflows will not suit all projects, but they can be a good starting point for projects that have similar requirements.</p> <p>The state of these workflows are considered to be in alpha, and are subject to change to suit the needs of projects managed by DAI.</p>"},{"location":"#github-actions-reusable-workflows","title":"Github Actions - Reusable Workflows","text":"<p>Official Docs</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Terraform orchestration</li> <li>Docker image management</li> <li>Lambda builds</li> <li>AWS secrets cloning across AWS accounts.</li> </ul>"},{"location":"#goals","title":"Goals","text":"<p>The main goal is to have a single source of truth for all standard workflows, so that they can be easily maintained.</p>"},{"location":"#when-to-use-reusable-workflows","title":"When to use reusable workflows","text":"<ul> <li>Terraform orchestration</li> <li>Simple docker workflows</li> <li>Running repeatable tasks across multiple projects e.g. Ad hoc scripts</li> </ul>"},{"location":"#when-not-to-use-reusable-workflows","title":"When not to use reusable workflows","text":"<ul> <li>When you need to customize the workflow for your specific use case.</li> <li>Most of the time application builds and tests are unique to the project and should be maintained in the project repository.</li> <li>Secrets are required to be stored in the project repository. (We recommend using AWS Secrets Manager for workflow secrets)</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Create a <code>.github/workflows</code> directory in your repository and create workflows that reference the workflows in this repository.</p> <pre><code>name: My Workflow\non: push\njobs:\n  my-job:\n    uses: &lt;org&gt;/&lt;repo&gt;/.github/workflows/&lt;workflow-name&gt;.yaml@&lt;ref&gt;\n    with:\n      my-input: my-value\n</code></pre> <p>For more complete examples see the examples page.</p>"},{"location":"faq/","title":"FAQ","text":"<p>TBA</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/docker-terraform/","title":"Build Docker and Deploy Terraform","text":"<pre><code>name: Build and Deploy\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  docker_build_artifact:\n    uses: dnd-it/github-workflows/.github/workflows/docker-build.yaml@v1\n\n  docker_push_ecr:\n    if: github.event_name == 'push'\n    needs: [docker_build_artifact]\n    strategy:\n      fail-fast: true\n      matrix:\n        stack: [app]\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/docker-push-ecr.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.environment }}\n\n  plan:\n    if: github.event_name == 'pull_request'\n    needs: [docker_build_artifact]\n    strategy:\n      fail-fast: false\n      matrix:\n        stack: [app]\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.environment }}\n\n  apply:\n    if: github.ref_name == github.event.repository.default_branch &amp;&amp; (github.event_name == 'push' || github.event_name == 'workflow_dispatch')\n    needs: [docker_push_ecr]\n    strategy:\n      fail-fast: true\n      max-parallel: 1\n      matrix:\n        stack: [app]\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.environment }}\n</code></pre>"},{"location":"examples/lambda-build/","title":"Lambda Build and Deploy with Terraform","text":"<p>This example demonstrates how to deploy a lambda function using Terraform.</p> <pre><code>name: Build and Deploy\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  test:\n    if: github.event_name == 'pull_request'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n  build:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-nodejs.yaml@v1\n    with:\n      node_version: \"20\"\n      source_dir: src/lambda\n\n  plan:\n    if: github.event_name == 'pull_request'\n    needs: [build]\n    strategy:\n      fail-fast: false\n      matrix:\n        environment: [dev, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v1\n    with:\n      environment: ${{ matrix.environment }}\n      gh_artifact_name: artifact\n\n  apply:\n    if: github.ref_name == github.event.repository.default_branch &amp;&amp; (github.event_name == 'push' || github.event_name == 'workflow_dispatch')\n    needs: [build]\n    strategy:\n      fail-fast: true\n      max-parallel: 1\n      matrix:\n        environment: [dev, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v1\n    with:\n      environment: ${{ matrix.environment }}\n      gh_artifact_name: artifact\n</code></pre>"},{"location":"examples/multiple-releases/","title":"Terraform Stack with Multiple Releases","text":"<p>This example demonstrates how to deploy multiple Terraform stacks with different releases and environments.</p> <p>The matrix will produce the following jobs:</p> <ul> <li>platform-v0-dev</li> <li>platform-v0-prod</li> <li>platform-v1-dev</li> <li>platform-v1-prod</li> </ul> <p>A common use case for creating a new stack release is to provide a way to deploy a new version of the stack without affecting the existing stack. This is useful for testing new features or changes before deploying to production.</p> <pre><code>name: Deployment\n\non:\n  push:\n    branches: [main]\n    paths:\n      - platform/**\n  pull_request:\n    branches: [main]\n    paths:\n      - platform/**\n  workflow_dispatch:\n\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  plan:\n    if: github.event_name == 'pull_request'\n    strategy:\n      fail-fast: false\n      matrix:\n        stack: [platform]\n        deployment: [v0, v1]\n        environment: [dev, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.deployment}}-${{ matrix.environment }}\n\n  apply:\n    if: github.ref_name == github.event.repository.default_branch &amp;&amp; (github.event_name == 'push' || github.event_name == 'workflow_dispatch')\n    strategy:\n      fail-fast: true\n      max-parallel: 1\n      matrix:\n        stack: [platform]\n        deployment: [v0, v1]\n        environment: [dev, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.deployment}}-${{ matrix.environment }}\n</code></pre>"},{"location":"examples/terraform-multiple/","title":"Multiple Terraform Stacks","text":"<p>This example demonstrates how to deploy multiple Terraform stacks. A stack is a terraform root module.</p> <p>This is a common use case for separating infrastructure and application resources.</p> <pre><code>name: Deployment\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  plan:\n    if: github.event_name == 'pull_request'\n    strategy:\n      fail-fast: false\n      matrix:\n        stack: [infra, app]\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.environment }}\n      tf_dir: deploy/${{ matrix.stack }}\n\n  apply:\n    if: github.ref_name == github.event.repository.default_branch &amp;&amp; (github.event_name == 'push' || github.event_name == 'workflow_dispatch')\n    strategy:\n      fail-fast: true\n      max-parallel: 1\n      matrix:\n        stack: [infra, app]\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v1\n    with:\n      environment: ${{ matrix.stack }}-${{ matrix.environment }}\n      tf_dir: deploy/${{ matrix.stack }}\n</code></pre>"},{"location":"examples/terraform-single/","title":"Single Terraform Stack","text":"<p>Single Terraform stack example with multiple environments.</p> <pre><code>name: Deployment\n\non:\n  push:\n    branches: [main]\n\n  pull_request:\n    branches: [main]\n\n  workflow_dispatch:\n\npermissions:\n  id-token: write\n  contents: read\n  pull-requests: write\n\njobs:\n  plan:\n    if: github.event_name == 'pull_request'\n    strategy:\n      fail-fast: false\n      matrix:\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v1\n    with:\n      environment: ${{ matrix.environment }}\n      tf_dir: deploy\n\n  apply:\n    if: github.ref_name == github.event.repository.default_branch &amp;&amp; (github.event_name == 'push' || github.event_name == 'workflow_dispatch')\n    strategy:\n      fail-fast: true\n      max-parallel: 1\n      matrix:\n        environment: [dev, int, prod]\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v1\n    with:\n      environment: ${{ matrix.environment }}\n      tf_dir: deploy\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>To get started with using reusable workflows in your repository, follow these steps:</p> <ol> <li> <p>Create a .github/workflows directory in your repository if it doesn't already exist. This is where all your workflow files will be stored.</p> </li> <li> <p>Choose an Example Workflow    Browse the docs/examples/ folder in the reusable workflows repository and select an example workflow that suits your needs. Copy the file into your .github/workflows directory.</p> </li> <li> <p>Open the copied workflow file and tailor it to your project. Each workflow includes a set of jobs that define tasks to be executed. Adjust these tasks, steps, and settings as needed.</p> </li> <li> <p>Ensure all required inputs are set correctly. These inputs may include environment variables, AWS credentials, or Docker image details. The workflow file will specify which inputs are necessary, and you can modify them to match your project\u2019s requirements.</p> </li> <li> <p>Once you've customized the workflow, commit and push your changes to the repository.</p> </li> <li> <p>The workflow will automatically run based on the event triggers defined in the file (e.g., push, pull_request). Ensure the events are configured as needed for your use case.</p> </li> </ol> <p>That's it! You have successfully set up and customized a reusable workflow in your repository. Now you can benefit from the predefined tasks and automation provided by the workflow to streamline your development process.</p>"},{"location":"getting-started/#deploy-workflows-through-tam-cli-tool","title":"Deploy workflows through Tam CLI tool","text":"<p>Generic workflows can be seamlessly deployed to your repository using the Tam CLI tool. This tool simplifies the process by automatically creating a pull request in your repository, ensuring that all required inputs and GitHub environments are generated and configured for you. Tam CLI leverages templates defined in the Templates repository. For more details refer to the Tam CLI page.</p>"},{"location":"getting-started/inputs/","title":"Workflow Inputs","text":"<p>Workflows in GitHub Actions can be configured to accept inputs in two main ways: through direct inputs or by fetching inputs from repository or environment variables. Direct inputs allow you to pass specific values when triggering a workflow, such as setting the environment, branch names, or custom configuration parameters. This method provides immediate control over the execution of the workflow, making it ideal for cases where values need to be adjusted frequently.</p> <p></p> <p>Alternatively, workflows can pull inputs from predefined repository or environment variables. This approach allows for reusable configurations across multiple workflows, reducing the need to hard-code values directly in each workflow file. Environment variables can store things like version numbers, paths, or other non-sensitive project configurations, helping to standardize workflow behavior across different scenarios.</p> <p></p> <p>By combining both methods, you can create flexible workflows that either accept dynamic inputs or reuse predefined settings for consistent automation.</p> <p>Inputs are assigned based on the following logic:</p> <p><code>TF_VARS: ${{ inputs.tf_vars || vars.tf_vars }}</code></p> <p>eg. if <code>inputs.tf_vars</code> is not set, it will default to <code>vars.tf_vars</code> and if <code>vars.tf_vars</code> is not set, it will default to <code>null</code>.</p>"},{"location":"getting-started/tam-cli/","title":"Tam CLI","text":"<p>Generic workflows can be deployed to your repository using the Tam CLI tool. This ensures that all required inputs and GitHub environments are correctly generated and added for you.</p> <p>Note: Tam CLI is a tool designed to deploy various types of templates. The template for workflows can be selected during tool execution by choosing the option: Addons/GithubWorkflows</p> <pre><code>tam template init your-destination-repository\n\nEnter team/account to include configurations (20minuten, dai, disco, discovery,\nness, pmd, sfmc, test, titan, unity): select the team/account\nEnter the template to use [DND-IT/templates]:\nYou've downloaded .cookiecutters/templates before.\nIs it okay to delete and re-download it? [y/n] (y): y\nSelect a template\n    1 - Bases (Cookiecutter templates for base repositories)\n    2 - Addons (Cookiecutter templates for additional features)\n    Choose from [1/2] (1): 2\nSelect a template\n    1 - Flux CronJob Deployment (template for deploying a new SFMC cronjob)\n    2 - Flux Service Deployment (template for deploying a new SFMC service)\n    3 - MKDocs (Cookiecutter template for MKDocs)\n    4 - GithubWorkflows (Cookiecutter template for github workflows)\n    Choose from [1/2/3/4] (1): 4\n  [1/9] Enter the project name (My Project):\n  [2/9] project_slug (My Project):\n  [3/9] Enter the Docker image name ():\n  [4/9] Enter the path for Docker build context (.):\n  [5/9] Enter the path for the Dockerfile (nodejs/Dockerfile):\n  [6/9] Define whether the WFs rely on GitHub environments or not. [y/n] (y):\n  [7/9] Defines whether the feature branch option is available. [y/n] (y):\n  [8/9] github_repo ():\n  [9/9] environments (default):\n</code></pre> <p>Once completed, a pull request is open in the destination repository.</p>"},{"location":"workflows/","title":"Workflows","text":""},{"location":"workflows/argocd-cli/","title":"ArgoCD CLI","text":""},{"location":"workflows/argocd-cli/#description","title":"Description","text":"<p>Run arbitrary ArgoCD CLI commands in a GitHub Actions workflow. This action allows you to specify the version of the ArgoCD CLI, the architecture, and the commands to execute. It supports both <code>amd64</code> and <code>arm64</code> architectures and can run multiple commands in sequence.</p>"},{"location":"workflows/argocd-cli/#inputs","title":"Inputs","text":"name description type required default <code>argocd_version</code> <p>ArgoCD CLI version to use</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>argocd_architecture</code> <p>Architecture for ArgoCD CLI (default is amd64)</p> <code>string</code> <code>false</code> <code>amd64</code> <code>argocd_server</code> <p>ArgoCD server URL</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>argocd_grpc_web</code> <p>Use gRPC-web for ArgoCD CLI</p> <code>string</code> <code>false</code> <code>false</code> <code>argocd_commands</code> <p>ArgoCD CLI commands to run. Can be a single command or multiple commands separated by newlines. Example: app list   app get my-app   app sync my-app --prune <code>string</code> <code>true</code> <code>pre_run</code> <p>Custom commands to run before ArgoCD commands</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>post_run</code> <p>Custom commands to run after ArgoCD commands</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>working_directory</code> <p>Working directory for running commands</p> <code>string</code> <code>false</code> <code>.</code> <code>runner</code> <p>GitHub runner to use</p> <code>string</code> <code>false</code> <code>ubuntu-latest</code>"},{"location":"workflows/argocd-cli/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/argocd-cli.yaml@v2\n    with:\n      argocd_version:\n      # ArgoCD CLI version to use\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      argocd_architecture:\n      # Architecture for ArgoCD CLI (default is amd64)\n      #\n      # Type: string\n      # Required: false\n      # Default: amd64\n\n      argocd_server:\n      # ArgoCD server URL\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      argocd_grpc_web:\n      # Use gRPC-web for ArgoCD CLI\n      #\n      # Type: string\n      # Required: false\n      # Default: false\n\n      argocd_commands:\n      # ArgoCD CLI commands to run. Can be a single command or multiple commands separated by newlines.\n      # Example: |\n      #   app list\n      #   app get my-app\n      #   app sync my-app --prune\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      pre_run:\n      # Custom commands to run before ArgoCD commands\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      post_run:\n      # Custom commands to run after ArgoCD commands\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      working_directory:\n      # Working directory for running commands\n      #\n      # Type: string\n      # Required: false\n      # Default: .\n\n      runner:\n      # GitHub runner to use\n      #\n      # Type: string\n      # Required: false\n      # Default: ubuntu-latest\n</code></pre>"},{"location":"workflows/argocd-cli/#example","title":"Example","text":""},{"location":"workflows/argocd-cli/#basic-usage","title":"Basic Usage","text":"<pre><code>jobs:\n  argocd-commands:\n    uses: dnd-it/github-workflows/.github/workflows/argocd-cli.yaml@v2\n    with:\n      argocd_commands: |\n        version --client\n        app list\n        app get my-app\n</code></pre>"},{"location":"workflows/argocd-cli/#with-server-connection","title":"With Server Connection","text":"<pre><code>jobs:\n  sync-application:\n    uses: dnd-it/github-workflows/.github/workflows/argocd-cli.yaml@v2\n    with:\n      argocd_server: \"argocd.example.com\"\n      argocd_grpc_web: \"true\"\n      argocd_commands: |\n        app sync my-app --prune\n        app wait my-app --health\n    secrets:\n      argocd_auth_token: ${{ secrets.ARGOCD_AUTH_TOKEN }}\n</code></pre>"},{"location":"workflows/argocd-cli/#with-prepost-commands","title":"With Pre/Post Commands","text":"<pre><code>jobs:\n  deploy-with-setup:\n    uses: dnd-it/github-workflows/.github/workflows/argocd-cli.yaml@v2\n    with:\n      pre_run: |\n        echo \"Setting up environment...\"\n        export DEPLOY_ENV=production\n      argocd_commands: |\n        app create my-app --repo https://github.com/org/repo --path k8s --dest-server https://kubernetes.default.svc\n        app sync my-app\n      post_run: |\n        echo \"Deployment completed\"\n        curl -X POST https://webhook.site/deployment-complete\n</code></pre>"},{"location":"workflows/argocd-cli/#using-specific-version","title":"Using Specific Version","text":"<pre><code>jobs:\n  argocd-v2-12:\n    uses: dnd-it/github-workflows/.github/workflows/argocd-cli.yaml@v2\n    with:\n      argocd_version: \"3.0.1\"\n      argocd_architecture: \"amd64\"\n      argocd_commands: |\n        version --client\n        repo list\n</code></pre>"},{"location":"workflows/argocd-cli/#faq","title":"FAQ","text":""},{"location":"workflows/argocd-cli/#q-how-do-i-authenticate-with-an-argocd-server","title":"Q: How do I authenticate with an ArgoCD server?","text":"<p>A: Use the <code>argocd_server</code> input to specify your server URL and pass the authentication token as a secret:</p> <pre><code>with:\n  argocd_server: \"argocd.example.com\"\nsecrets:\n  argocd_auth_token: ${{ secrets.ARGOCD_TOKEN }}\n</code></pre>"},{"location":"workflows/argocd-cli/#q-can-i-use-environment-variables-from-github","title":"Q: Can I use environment variables from GitHub?","text":"<p>A: Yes, the workflow supports GitHub environment variables. If you don't provide an input, it will fall back to the corresponding GitHub variable (e.g., <code>vars.argocd_version</code>).</p>"},{"location":"workflows/argocd-cli/#q-how-do-i-run-multiple-argocd-commands","title":"Q: How do I run multiple ArgoCD commands?","text":"<p>A: Use the multiline YAML syntax with the pipe (<code>|</code>) character:</p> <pre><code>argocd_commands: |\n  app list\n  app get my-app\n  app sync my-app --prune\n</code></pre>"},{"location":"workflows/argocd-cli/#q-what-architectures-are-supported","title":"Q: What architectures are supported?","text":"<p>A: The workflow supports both <code>amd64</code> (default) and <code>arm64</code> architectures. Specify using the <code>argocd_architecture</code> input.</p>"},{"location":"workflows/argocd-cli/#q-can-i-use-this-workflow-with-a-custom-runner","title":"Q: Can I use this workflow with a custom runner?","text":"<p>A: Yes, use the <code>runner</code> input to specify a custom runner:</p> <pre><code>with:\n  runner: \"self-hosted\"\n  argocd_commands: \"version --client\"\n</code></pre>"},{"location":"workflows/argocd-cli/#q-how-do-i-handle-errors-in-commands","title":"Q: How do I handle errors in commands?","text":"<p>A: The workflow uses <code>set -e</code> which will stop execution on the first error. If you need to handle errors gracefully, use shell error handling in your commands:</p> <pre><code>argocd_commands: |\n  app sync my-app || echo \"Sync failed, but continuing...\"\n  app list\n</code></pre>"},{"location":"workflows/aws-rds-snapshot/","title":"AWS RDS Snapshot","text":""},{"location":"workflows/aws-rds-snapshot/#description","title":"Description","text":""},{"location":"workflows/aws-rds-snapshot/#example","title":"Example","text":""},{"location":"workflows/aws-rds-snapshot/#faq","title":"FAQ","text":""},{"location":"workflows/aws-secrets-copy/","title":"AWS Secrets Copy","text":""},{"location":"workflows/aws-secrets-copy/#aws-secrets-copy","title":"AWS Secrets Copy","text":""},{"location":"workflows/aws-secrets-copy/#description","title":"Description","text":"<p>This workflow copies an AWS secret from one account to another.</p>"},{"location":"workflows/aws-secrets-copy/#inputs","title":"Inputs","text":"name description type required default <code>source_aws_region</code> <p>AWS region</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>source_aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>source_secret_name</code> <p>AWS secret name to copy from</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>destination_aws_region</code> <p>AWS region</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>destination_aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>destination_secret_name</code> <p>AWS secret name to copy to (default to the source secret name)</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>secret_description</code> <p>The description to attach to the AWS secret (default to the description of the source secret's description)</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_tags</code> <p>Tags to put on the created secret in the form '[{\"Key\":\"key1\", \"Value\":\"value1\"},{\"Key\":\"key2\", \"Value\":\"value2\"}] (default to no tags)'</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/aws-secrets-copy/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/aws-secrets-copy.yaml@v2\n    with:\n      source_aws_region:\n      # AWS region\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      source_aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      source_secret_name:\n      # AWS secret name to copy from\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      destination_aws_region:\n      # AWS region\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      destination_aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      destination_secret_name:\n      # AWS secret name to copy to (default to the source secret name)\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      secret_description:\n      # The description to attach to the AWS secret (default to the description of the source secret's description)\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_tags:\n      # Tags to put on the created secret in the form '[{\"Key\":\"key1\", \"Value\":\"value1\"},{\"Key\":\"key2\", \"Value\":\"value2\"}] (default to no tags)'\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/aws-secrets-copy/#example","title":"Example","text":"<pre><code>on: [push, pull_request]\njobs:\n  copy_secret:\n    uses: ./.github/workflows/aws-secrets-copy.yaml\n    with:\n      source_aws_region: 'us-west-2'\n      source_aws_oidc_role_arn: 'arn:aws:iam::123456789012:role/my-aws-role'\n      source_secret_name: ' my-aws-secret'\n      destination_aws_region: 'us-west-1'\n      destination_aws_oidc_role_arn: 'arn:aws:iam::012345678901:role/my-aws-role'\n</code></pre>"},{"location":"workflows/aws-secrets-copy/#faq","title":"FAQ","text":"<p>Q: What happen if the destination secret already exists ?</p> <p>A: The destination AWS secret value will be updated to the value of the source secret</p>"},{"location":"workflows/aws-secrets-copy/#workflow","title":"Workflow","text":"<p>There is a validation workflow triggered when a pull request from a feature branch to <code>main</code> is created. The workflow will create some temporary AWS secrets to validate that different use cases of the workflow will work:</p> <ul> <li>Copy of a secret to non existing secret</li> <li>Copy of a secret to an existing secret</li> <li>Copy of a secret with different input parameters</li> </ul> <p>At the end, all secrets are deleted</p>"},{"location":"workflows/docker-build-push-ecr/","title":"Docker Build and Push to ECR","text":""},{"location":"workflows/docker-build-push-ecr/#docker-build-and-push-to-ecr","title":"Docker Build and Push to ECR","text":""},{"location":"workflows/docker-build-push-ecr/#description","title":"Description","text":"<p>This workflow builds a Docker image and pushes it to the Elastic Container Registry (ECR).</p>"},{"location":"workflows/docker-build-push-ecr/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to run the build in</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>AWS Account ID</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>AWS Region</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>AWS Role Name</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_name</code> <p>Name of the Docker image to build</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_tag</code> <p>Addition tag to the Docker image, default tag is the commit SHA</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>docker_context</code> <p>Path to the build context</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>dockerfile_path</code> <p>Path to the Dockerfile. If not defined, will default to {docker_context}/Dockerfile</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>docker_push</code> <p>Push Image to ECR</p> <code>boolean</code> <code>false</code> <code>true</code> <code>docker_target</code> <p>Build target</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_name</code> <p>Artifact name to be downloaded before building</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_path</code> <p>Artifact target path</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_pattern</code> <p>A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_merge_multiple</code> <p>When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.</p> <code>boolean</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/docker-build-push-ecr/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/docker-build-push-ecr.yaml@v2\n    with:\n      environment:\n      # Environment to run the build in\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # AWS Account ID\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # AWS Region\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # AWS Role Name\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_name:\n      # Name of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_tag:\n      # Addition tag to the Docker image, default tag is the commit SHA\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      docker_context:\n      # Path to the build context\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      dockerfile_path:\n      # Path to the Dockerfile. If not defined, will default to {docker_context}/Dockerfile\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      docker_push:\n      # Push Image to ECR\n      #\n      # Type: boolean\n      # Required: false\n      # Default: true\n\n      docker_target:\n      # Build target\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_name:\n      # Artifact name to be downloaded before building\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_path:\n      # Artifact target path\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_pattern:\n      # A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_merge_multiple:\n      # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/docker-build-push-ecr/#example","title":"Example","text":"<pre><code>on: [push, pull_request]\njobs:\n  docker_build_push_ecr:\n    uses: ./.github/workflows/docker-build-push-ecr.yaml\n    with:\n      environment: 'production'\n      aws_region: 'us-west-2'\n      aws_oidc_role_arn: 'arn:aws:iam::123456789012:role/my-aws-role'\n      image_name: 'my-docker-image'\n      image_tag: 'latest'\n      docker_context: '.'\n      dockerfile_path: 'Dockerfile'\n      docker_push: 'true'\n</code></pre>"},{"location":"workflows/docker-build-push-ecr/#faq","title":"FAQ","text":"<p>Q: How do I specify the AWS credentials?</p> <p>A: The AWS credentials are specified using the aws_account_id, aws_region, aws_role_name, and aws_oidc_role_arn inputs.</p> <p>Q: How do I specify the Docker image name and tag?</p> <p>A: The Docker image name and tag are specified using the image_name and image_tag inputs. By default, the image name is the repository name.</p> <p>Q: How do I specify the build context and Dockerfile path?</p> <p>A: The build context and Dockerfile path are specified using the docker_context and dockerfile_path inputs. By default, the build context is . and the Dockerfile path is {docker_context}/Dockerfile.</p> <p>Q: How do I control whether the image is pushed to ECR?</p> <p>A: Whether the image is pushed to ECR is controlled using the docker_push input. By default, it is set to true.</p> <p>Q: Can I only build or only push ?</p> <p>A: Yes you can call separately the workflows docker-build.yaml and docker-push-ecr.yaml. Please refer to each individual workflow for informations about inputs.</p> <p>Q: Can I pass files and folders from other jobs?</p> <p>A: Yes, you can upload them as artifacts and have the docker-build-push-ecr.yaml to download them via <code>artifact_path</code> and <code>artifact_name</code>. Example <code>DND-IT/disco</code> PR</p>"},{"location":"workflows/docker-build/","title":"Docker Build","text":""},{"location":"workflows/docker-build/#docker-build","title":"Docker Build","text":""},{"location":"workflows/docker-build/#description","title":"Description","text":"<p>This workflow builds a Docker image and the artifact is uploaded to the GitHub artifact store.</p>"},{"location":"workflows/docker-build/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_name</code> <p>Name of the Docker image to build</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>docker_context</code> <p>Path to the build context</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_name</code> <p>Name of the artifact to upload. If not set, it will be derived from the image name</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_retention_days</code> <p>Number of days to retain the artifact</p> <code>number</code> <code>false</code> <code>\"\"</code> <code>docker_target</code> <p>Build target</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/docker-build/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/docker-build.yaml@v2\n    with:\n      environment:\n      # Environment to deploy\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_name:\n      # Name of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      docker_context:\n      # Path to the build context\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_name:\n      # Name of the artifact to upload. If not set, it will be derived from the image name\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_retention_days:\n      # Number of days to retain the artifact\n      #\n      # Type: number\n      # Required: false\n      # Default: \"\"\n\n      docker_target:\n      # Build target\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/docker-build/#example","title":"Example","text":""},{"location":"workflows/docker-build/#faq","title":"FAQ","text":""},{"location":"workflows/docker-buildx-push-ecr/","title":"Docker Multi-Arch Build and Push to ECR","text":""},{"location":"workflows/docker-buildx-push-ecr/#description","title":"Description","text":""},{"location":"workflows/docker-buildx-push-ecr/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to run the build in</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>AWS Account ID</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>AWS Region</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>AWS Role Name</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_name</code> <p>Name of the Docker image to build</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_tag</code> <p>Tag of the Docker image to build</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_push_sha_tag</code> <p>Push Image SHA as Tag to ECR</p> <code>boolean</code> <code>false</code> <code>true</code> <code>docker_context</code> <p>Path to the build context</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>dockerfile_path</code> <p>Path to the Dockerfile. If not defined, will default to {docker_context}/Dockerfile</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>docker_push</code> <p>Push Image to ECR</p> <code>boolean</code> <code>false</code> <code>true</code> <code>docker_target</code> <p>Build target</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>docker_platforms</code> <p>Build Platforms. Allowed values: <code>linux/amd64</code>, <code>linux/arm64</code> and <code>linux/amd64,linux/arm64</code></p> <code>string</code> <code>false</code> <code>linux/amd64</code> <code>artifact_name</code> <p>Artifact name to be downloaded before building</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_path</code> <p>Artifact target path</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_pattern</code> <p>A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_merge_multiple</code> <p>When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.</p> <code>boolean</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/docker-buildx-push-ecr/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: tx-pts-dai/github-workflows/.github/workflows/docker-buildx-push-ecr.yaml@v2\n    with:\n      environment:\n      # Environment to run the build in\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # AWS Account ID\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # AWS Region\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # AWS Role Name\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_name:\n      # Name of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_tag:\n      # Tag of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_push_sha_tag:\n      # Push Image SHA as Tag to ECR\n      #\n      # Type: boolean\n      # Required: false\n      # Default: true\n\n      docker_context:\n      # Path to the build context\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      dockerfile_path:\n      # Path to the Dockerfile. If not defined, will default to {docker_context}/Dockerfile\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      docker_push:\n      # Push Image to ECR\n      #\n      # Type: boolean\n      # Required: false\n      # Default: true\n\n      docker_target:\n      # Build target\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      docker_platforms:\n      # Build Platforms. Allowed values: `linux/amd64`, `linux/arm64` and `linux/amd64,linux/arm64`\n      #\n      # Type: string\n      # Required: false\n      # Default: linux/amd64\n\n      artifact_name:\n      # Artifact name to be downloaded before building\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_path:\n      # Artifact target path\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_pattern:\n      # A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_merge_multiple:\n      # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/docker-buildx-push-ecr/#example","title":"Example","text":"<pre><code>on: [push, pull_request]\njobs:\n  docker_build_push_ecr:\n    uses: ./.github/workflows/docker-buildx-push-ecr.yaml\n    with:\n      environment: 'production'\n      aws_region: 'us-west-2'\n      aws_oidc_role_arn: 'arn:aws:iam::123456789012:role/my-aws-role'\n      image_name: 'my-docker-image'\n      image_tag: 'latest'\n      docker_context: '.'\n      dockerfile_path: 'Dockerfile'\n      docker_push: 'true'\n      # choose the archs that you want to build\n      # docker_platforms: \"linux/amd64\"\n      # docker_platforms: \"linux/arm64\"\n      # docker_platforms: \"linux/amd64,linux/arm64\"\n</code></pre>"},{"location":"workflows/docker-buildx-push-ecr/#faq","title":"FAQ","text":"<p>Q: How do I choose which architectures will be build?</p> <p>A: Using the input <code>docker_platforms</code> you can choose between <code>linux/amd64</code>, <code>linux/arm64</code> or <code>linux/amd64,linux/arm64</code> - the latter will build both architectures.</p> <p>Q: How do I specify the AWS credentials?</p> <p>A: The AWS credentials are specified using the aws_account_id, aws_region, aws_role_name, and aws_oidc_role_arn inputs.</p> <p>Q: How do I specify the Docker image name and tag?</p> <p>A: The Docker image name and tag are specified using the image_name and image_tag inputs. By default, the image name is the repository name.</p> <p>Q: How do I specify the build context and Dockerfile path?</p> <p>A: The build context and Dockerfile path are specified using the docker_context and dockerfile_path inputs. By default, the build context is . and the Dockerfile path is {docker_context}/Dockerfile.</p> <p>Q: How do I control whether the image is pushed to ECR?</p> <p>A: Whether the image is pushed to ECR is controlled using the docker_push input. By default, it is set to true.</p> <p>Q: Can I only build or only push ?</p> <p>A: Yes you can call separately the workflows docker-build.yaml and docker-push-ecr.yaml. Please refer to each individual workflow for informations about inputs.</p> <p>Q: Can I pass files and folders from other jobs?</p> <p>A: Yes, you can upload them as artifacts and have the docker-build-push-ecr.yaml to download them via <code>artifact_path</code> and <code>artifact_name</code>. Example <code>DND-IT/disco</code> PR</p>"},{"location":"workflows/docker-push-ecr/","title":"Docker Push to ECR","text":""},{"location":"workflows/docker-push-ecr/#docker-push-to-ecr","title":"Docker Push to ECR","text":""},{"location":"workflows/docker-push-ecr/#description","title":"Description","text":"<p>This workflow pushes a Docker artifact to an ECR repository.</p>"},{"location":"workflows/docker-push-ecr/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>AWS Account ID</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>AWS Region</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>AWS Role Name</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_name</code> <p>Name of the Docker image to build</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>image_tag</code> <p>Tag of the Docker image to build</p> <code>string</code> <code>false</code> <code>${{ github.event.pull_request.head.sha || github.sha }}</code> <code>artifact_name</code> <p>Artifact name. If not set, it will be derived from the image name.</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/docker-push-ecr/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/docker-push-ecr.yaml@v2\n    with:\n      environment:\n      # Environment to deploy\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # AWS Account ID\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # AWS Region\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # AWS Role Name\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_name:\n      # Name of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      image_tag:\n      # Tag of the Docker image to build\n      #\n      # Type: string\n      # Required: false\n      # Default: ${{ github.event.pull_request.head.sha || github.sha }}\n\n      artifact_name:\n      # Artifact name. If not set, it will be derived from the image name.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/docker-push-ecr/#example","title":"Example","text":""},{"location":"workflows/docker-push-ecr/#faq","title":"FAQ","text":""},{"location":"workflows/gh-release-on-main/","title":"Github Conventional Commit Release","text":""},{"location":"workflows/gh-release-on-main/#github-conventional-commit-release","title":"Github Conventional Commit Release","text":""},{"location":"workflows/gh-release-on-main/#description","title":"Description","text":"<p>This GitHub Action is designed to automate the process of creating a new release on push to the main branch. It's triggered on a pull_request closed event to the main branch and does not require any inputs.</p> <p>However, it requires specific naming convention for the commit message in order to release the right version.</p> <p>The release automatically increases the patch, minor or major version, but also tags the MAJOR and MAJOR.MINOR versions to point to the latest commit.</p> <p>The workflow pays attention to the title of the latest commit and check what it starts with. Which means that when squashing and merging your PR, you need to add the proper key words.</p> <p>The options are:</p> <ol> <li>\"fix: Some comment\" -&gt; will increment the patch version x.x.PATCH+1</li> <li>\"feat: Some comment\" -&gt; will increment the minor version x.MINOR+1.0</li> <li>\"feat!: Some comment\" -&gt; will increment the major version MAJOR+1.0.0</li> </ol>"},{"location":"workflows/gh-release-on-main/#inputs","title":"Inputs","text":"name description type required default <code>metadata_file</code> <p>File path containing the extra metadata to append to the release version, if not specified the standard semver is applied</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>update_version_aliases</code> <p>Automatically update version alias tags (e.g., v1 and v1.2) to point to the latest release.</p> <code>boolean</code> <code>false</code> <code>true</code>"},{"location":"workflows/gh-release-on-main/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/gh-release-on-main.yaml@v2\n    with:\n      metadata_file:\n      # File path containing the extra metadata to append to the release version, if not specified the standard semver is applied\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      update_version_aliases:\n      # Automatically update version alias tags (e.g., v1 and v1.2) to point to the latest release.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: true\n</code></pre>"},{"location":"workflows/gh-release-on-main/#example","title":"Example","text":"<ul> <li> <p>we currently are at version v1.1.1. . Squashing/merging a PR with a \"fix:\" prefix will increase the patch version (-&gt; v1.1.2), and also will renew tagging so that workflows already calling @v1 or @v1.1 would target the new release v1.1.2.</p> </li> <li> <p>we currently are at version v1.1.9. Squashing/merging a PR with a \"feat:\" prefix will increase the minor version (-&gt; v1.2.0), and also will renew tagging so that workflows already calling @v1 or @v1.2 would target the new release v1.2.0.</p> </li> </ul>"},{"location":"workflows/gh-release-on-main/#faq","title":"FAQ","text":"<p>Q: How is the version number determined?</p> <p>A: The version number is determined by fetching all tags, sorting them, and retrieving the latest version. If no tags are found, it defaults to v0.0.1.</p> <p>Q: How are the release notes generated?</p> <p>A: The release notes are automatically generated by the <code>softprops/action-gh-release@v1</code> action.</p>"},{"location":"workflows/gh-release/","title":"Github Release","text":""},{"location":"workflows/gh-release/#github-release","title":"Github Release","text":""},{"location":"workflows/gh-release/#description","title":"Description","text":"<p>This workflow creates a release based on the tag.</p>"},{"location":"workflows/gh-release/#inputs","title":"Inputs","text":"name description type required default <code>tag</code> <p>The tag to release</p> <code>string</code> <code>true</code> <code>\"\"</code>"},{"location":"workflows/gh-release/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/gh-release.yaml@v2\n    with:\n      tag:\n      # The tag to release\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/gh-release/#example","title":"Example","text":""},{"location":"workflows/gh-release/#faq","title":"FAQ","text":""},{"location":"workflows/gitops-helm-diff/","title":"Helm Diff Preview","text":""},{"location":"workflows/gitops-helm-diff/#description","title":"Description","text":"<p>This GitHub Action generates a diff of Helm chart templates between the current branch and the base branch of a pull request. It uses the <code>helm template</code> command to render the templates and compares them using <code>diff</code>. The action is designed to be used in a GitHub Actions workflow, particularly for pull requests.</p>"},{"location":"workflows/gitops-helm-diff/#inputs","title":"Inputs","text":"name description type required default <code>helm_chart_path</code> <p>Path to the Helm chart directory</p> <code>string</code> <code>false</code> <code>deploy/app</code> <code>environments_path</code> <p>Path to the directory containing environment-specific values</p> <code>string</code> <code>false</code> <code>deploy/app/envs</code> <code>output_path</code> <p>Path to the output directory for diffs</p> <code>string</code> <code>false</code> <code>output</code> <code>base_branch</code> <p>Base branch for comparison</p> <code>string</code> <code>false</code> <code>${{ github.event.pull_request.base.ref }}</code> <code>helm_release_name</code> <p>Name to use for the Helm release when templating</p> <code>string</code> <code>false</code> <code>app</code> <code>helm_repo_url</code> <p>URL of the Helm repository to add</p> <code>string</code> <code>false</code> <code>https://dnd-it.github.io/helm-charts</code> <code>helm_repo_name</code> <p>Name to give to the Helm repository</p> <code>string</code> <code>false</code> <code>dnd-it</code> <code>debug</code> <p>Enable debug output</p> <code>string</code> <code>false</code> <code>false</code>"},{"location":"workflows/gitops-helm-diff/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-helm-diff.yaml@v2\n    with:\n      helm_chart_path:\n      # Path to the Helm chart directory\n      #\n      # Type: string\n      # Required: false\n      # Default: deploy/app\n\n      environments_path:\n      # Path to the directory containing environment-specific values\n      #\n      # Type: string\n      # Required: false\n      # Default: deploy/app/envs\n\n      output_path:\n      # Path to the output directory for diffs\n      #\n      # Type: string\n      # Required: false\n      # Default: output\n\n      base_branch:\n      # Base branch for comparison\n      #\n      # Type: string\n      # Required: false\n      # Default: ${{ github.event.pull_request.base.ref }}\n\n      helm_release_name:\n      # Name to use for the Helm release when templating\n      #\n      # Type: string\n      # Required: false\n      # Default: app\n\n      helm_repo_url:\n      # URL of the Helm repository to add\n      #\n      # Type: string\n      # Required: false\n      # Default: https://dnd-it.github.io/helm-charts\n\n      helm_repo_name:\n      # Name to give to the Helm repository\n      #\n      # Type: string\n      # Required: false\n      # Default: dnd-it\n\n      debug:\n      # Enable debug output\n      #\n      # Type: string\n      # Required: false\n      # Default: false\n</code></pre>"},{"location":"workflows/gitops-helm-diff/#example","title":"Example","text":"<p>```yaml name: Helm Diff Example</p> <p>on:   pull_request:     branches:       - main     paths:       - deploy/app/**</p> <p>jobs:   helm-diff:     uses: dnd-it/github-workflows/.github/workflows/.github/workflows/gitops-helm-diff.yaml@v2     with:       debug: true</p>"},{"location":"workflows/gitops-helm-diff/#faq","title":"FAQ","text":""},{"location":"workflows/gitops-image-tag/","title":"Update Helm Image Tag in Values.yaml","text":""},{"location":"workflows/gitops-image-tag/#description","title":"Description","text":"<p>This GitHub Actions workflow updates the image tag in specified yaml files. It can create a pull request with the changes or commit them directly to the target branch. The workflow is designed to be reusable and can handle multiple files and keys.</p>"},{"location":"workflows/gitops-image-tag/#inputs","title":"Inputs","text":"name description type required default <code>image_tag</code> <p>The tag of the Docker image</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>image_tag_keys</code> <p>Newline-separated list of keys to update (e.g., webapp.image.tag)</p> <code>string</code> <code>false</code> <code>webapp.image_tag</code> <code>values_files</code> <p>Newline-separated list of file paths to update</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>create_pr</code> <p>Create a pull request. If false, the changes will be committed directly to the target branch. Github Actions must have write permissions to the repository. If branch protection is enabled a Github App is required and is able to bypass branch protection rules.</p> <code>boolean</code> <code>false</code> <code>true</code> <code>pr_message</code> <p>Custom message for the pull request. Defaults to a standard message.</p> <code>string</code> <code>false</code> <code>This PR updates the Helm values files to use the latest image tag.</code> <code>auto_merge</code> <p>Enable auto-merge for the pull request. Only works if create_pr is true.</p> <code>boolean</code> <code>false</code> <code>false</code> <code>branch_name_prefix</code> <p>Prefix for the branch name.</p> <code>string</code> <code>false</code> <code>helm-values</code> <code>target_branch</code> <p>The target branch for the pull request. Defaults the default branch of the repository.</p> <code>string</code> <code>false</code> <code>${{ github.event.repository.default_branch }}</code> <code>app_id</code> <p>GitHub App ID for generating a token. Required if using GitHub App authentication.</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/gitops-image-tag/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-image-tag.yaml@v2\n    with:\n      image_tag:\n      # The tag of the Docker image\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      image_tag_keys:\n      # Newline-separated list of keys to update (e.g., webapp.image.tag)\n      #\n      # Type: string\n      # Required: false\n      # Default: webapp.image_tag\n\n      values_files:\n      # Newline-separated list of file paths to update\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      create_pr:\n      # Create a pull request. If false, the changes will be committed directly to the target branch.\n      # Github Actions must have write permissions to the repository. If branch protection is enabled a Github App is required and is able to bypass branch protection rules.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: true\n\n      pr_message:\n      # Custom message for the pull request. Defaults to a standard message.\n      #\n      # Type: string\n      # Required: false\n      # Default: This PR updates the Helm values files to use the latest image tag.\n\n      auto_merge:\n      # Enable auto-merge for the pull request. Only works if create_pr is true.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: false\n\n      branch_name_prefix:\n      # Prefix for the branch name.\n      #\n      # Type: string\n      # Required: false\n      # Default: helm-values\n\n      target_branch:\n      # The target branch for the pull request. Defaults the default branch of the repository.\n      #\n      # Type: string\n      # Required: false\n      # Default: ${{ github.event.repository.default_branch }}\n\n      app_id:\n      # GitHub App ID for generating a token. Required if using GitHub App authentication.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/gitops-image-tag/#examples","title":"Examples","text":""},{"location":"workflows/gitops-image-tag/#single-file-update","title":"Single File Update","text":"<pre><code>name: Update Image Tag\non:\n  workflow_run:\n    workflows: [\"Build and Push Docker Image\"]\n    types:\n      - completed\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  update-image:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-image-tag.yaml@v3\n    with:\n      image_tag: ${{ github.sha }}\n      values_files: deploy/app/values.yaml\n      image_tag_keys: image_tag\n      create_pr: true\n</code></pre>"},{"location":"workflows/gitops-image-tag/#multiple-files-update","title":"Multiple Files Update","text":"<pre><code>name: Update Image Tag in Multiple Environments\non:\n  workflow_dispatch:\n    inputs:\n      image_tag:\n        description: 'Docker image tag to deploy'\n        required: true\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  update-all-environments:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-image-tag.yaml@v3\n    with:\n      image_tag: ${{ inputs.image_tag }}\n      values_files: |\n        deploy/dev/values.yaml\n        deploy/staging/values.yaml\n        deploy/prod/values.yaml\n      image_tag_keys: \"app.image.tag\"\n      create_pr: true\n</code></pre> <p>This creates a single PR that updates the image tag across all environment files, making it easy to promote a specific version across environments.</p>"},{"location":"workflows/gitops-image-tag/#multiple-keys-update","title":"Multiple Keys Update","text":"<pre><code>name: Update Multiple Image Tags\non:\n  workflow_dispatch:\n    inputs:\n      image_tag:\n        description: 'Docker image tag'\n        required: true\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  update-multiple-keys:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-image-tag.yaml@v3\n    with:\n      image_tag: ${{ inputs.image_tag }}\n      image_tag_keys: |\n        webapp.image.tag\n        worker.image.tag\n        api.image.tag\n      values_files: deploy/app/values.yaml\n      create_pr: true\n</code></pre> <p>This updates multiple services that share the same Docker image.</p>"},{"location":"workflows/gitops-image-tag/#auto-merge-example","title":"Auto-merge Example","text":"<pre><code>name: Deploy to Production\non:\n  release:\n    types: [published]\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  deploy:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-image-tag.yaml@v3\n    with:\n      image_tag: ${{ github.event.release.tag_name }}\n      values_files: |\n        deploy/prod/values.yaml\n        deploy/prod/secondary/values.yaml\n      image_tag_keys: |\n        app.image.tag\n        worker.image.tag\n      create_pr: true\n      auto_merge: true\n      pr_message: |\n        Automated deployment of release ${{ github.event.release.tag_name }} to production.\n\n        Release notes: ${{ github.event.release.html_url }}\n</code></pre> <p>This creates a PR that will automatically merge once all checks pass, providing an audit trail while enabling continuous deployment.</p>"},{"location":"workflows/gitops-image-tag/#key-features","title":"Key Features","text":""},{"location":"workflows/gitops-image-tag/#automatic-pr-replacement","title":"Automatic PR Replacement","text":"<p>The workflow now generates consistent branch names based on the files being updated. This means: - If you update the same files again, the new PR will replace the old one - No more accumulating duplicate PRs for the same files - Branch names are based on a hash of the files being updated</p>"},{"location":"workflows/gitops-image-tag/#multiple-files-support","title":"Multiple Files Support","text":"<p>You can update multiple values files in a single workflow run: - Use the <code>values_files</code> input with newline-separated file paths - All files are updated in a single commit/PR</p>"},{"location":"workflows/gitops-image-tag/#multiple-keys-support","title":"Multiple Keys Support","text":"<p>You can update multiple keys with the same image tag: - Use the <code>image_tag_keys</code> input with newline-separated key paths - Useful when multiple services share the same image</p>"},{"location":"workflows/gitops-image-tag/#enhanced-pr-management","title":"Enhanced PR Management","text":"<ul> <li>Detailed PR descriptions showing all updated files</li> <li>Option to commit directly without creating a PR</li> </ul>"},{"location":"workflows/gitops-image-tag/#faq","title":"FAQ","text":"<p>Q: How can I update multiple values files?</p> <p>A: Use the <code>values_files</code> input with newline-separated file paths: <pre><code>values_files: |\n  file1.yaml\n  file2.yaml\n  file3.yaml\n</code></pre></p> <p>Q: Will this create multiple PRs if I run it multiple times?</p> <p>A: No, the workflow uses consistent branch naming based on the files being updated. Running it again will update the existing PR.</p> <p>Q: Can I update multiple keys with the same image tag?</p> <p>A: Yes, use the <code>image_tag_keys</code> input with newline-separated key paths: <pre><code>image_tag_keys: |\n  frontend.image.tag\n  backend.image.tag\n  worker.image.tag\n</code></pre></p> <p>Q: What happens if a key doesn't exist in a file?</p> <p>A: The workflow will skip that key and log a message. It only updates existing keys to prevent accidentally creating new structures.</p> <p>Q: Is the values_files input required?</p> <p>A: Yes, the <code>values_files</code> input is required. You must specify at least one file path to update.</p>"},{"location":"workflows/gitops-kustomize-diff/","title":"Kustomize Diff Preview","text":""},{"location":"workflows/gitops-kustomize-diff/#description","title":"Description","text":"<p>This workflow generates a diff preview for Kustomize overlays in a GitOps setup. It compares the current state of the Kustomize overlays with the base branch and outputs the differences.</p> <p>The action is designed to be used in a GitHub Actions workflow, particularly for pull requests.</p> <p>It uses the <code>kustomize build</code> command to render the overlays and compares them using <code>diff</code>.</p>"},{"location":"workflows/gitops-kustomize-diff/#inputs","title":"Inputs","text":"name description type required default <code>kustomize_path</code> <p>Path to the root Kustomize directory. Its assumed that base directory is nested under this path.</p> <code>string</code> <code>false</code> <code>deploy/app</code> <code>environments_path</code> <p>Path to the directory containing environment-specific overlays</p> <code>string</code> <code>false</code> <code>deploy/app/envs</code> <code>output_path</code> <p>Path to the output directory for diffs</p> <code>string</code> <code>false</code> <code>output</code> <code>base_branch</code> <p>Base branch for comparison</p> <code>string</code> <code>false</code> <code>${{ github.event.pull_request.base.ref }}</code> <code>kustomize_args</code> <p>Additional arguments to pass to kustomize build command</p> <code>string</code> <code>false</code> <code>--enable-helm --load-restrictor LoadRestrictionsNone</code> <code>debug</code> <p>Enable debug output</p> <code>string</code> <code>false</code> <code>false</code>"},{"location":"workflows/gitops-kustomize-diff/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-kustomize-diff.yaml@v2\n    with:\n      kustomize_path:\n      # Path to the root Kustomize directory. Its assumed that base directory is nested under this path.\n      #\n      # Type: string\n      # Required: false\n      # Default: deploy/app\n\n      environments_path:\n      # Path to the directory containing environment-specific overlays\n      #\n      # Type: string\n      # Required: false\n      # Default: deploy/app/envs\n\n      output_path:\n      # Path to the output directory for diffs\n      #\n      # Type: string\n      # Required: false\n      # Default: output\n\n      base_branch:\n      # Base branch for comparison\n      #\n      # Type: string\n      # Required: false\n      # Default: ${{ github.event.pull_request.base.ref }}\n\n      kustomize_args:\n      # Additional arguments to pass to kustomize build command\n      #\n      # Type: string\n      # Required: false\n      # Default: --enable-helm --load-restrictor LoadRestrictionsNone\n\n      debug:\n      # Enable debug output\n      #\n      # Type: string\n      # Required: false\n      # Default: false\n</code></pre>"},{"location":"workflows/gitops-kustomize-diff/#example","title":"Example","text":"<pre><code>name: ArgoCD Diff\n\non:\n  pull_request:\n    branches:\n      - main\n    paths:\n      - configs/argocd/hub/**\n\njobs:\n  kustomize-diff:\n    uses: dnd-it/github-workflows/.github/workflows/gitops-kustomize-diff.yaml@v2\n    with:\n      kustomize_path: configs/argocd/hub\n      environments_path: configs/argocd/hub\n      debug: true\n</code></pre>"},{"location":"workflows/gitops-kustomize-diff/#faq","title":"FAQ","text":""},{"location":"workflows/lambda-build-node/","title":"Build Lambda Layer","text":""},{"location":"workflows/lambda-build-node/#build-lambda-layer","title":"Build Lambda Layer","text":""},{"location":"workflows/lambda-build-node/#description","title":"Description","text":"<p>This workflow builds a Lambda Layer and the artifact is uploaded to the GitHub artifact store.</p>"},{"location":"workflows/lambda-build-node/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>node_version</code> <p>The Node.js version to use</p> <code>string</code> <code>false</code> <code>20</code> <code>source_dir</code> <p>The directory where the Lambda source code is located</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>build_dir</code> <p>The directory where the Lambda build artifacts are located</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>artifact_retention_days</code> <p>Number of days to retain the artifact</p> <code>number</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/lambda-build-node/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-build-node.yaml@v2\n    with:\n      environment:\n      # Environment to deploy.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      node_version:\n      # The Node.js version to use\n      #\n      # Type: string\n      # Required: false\n      # Default: 20\n\n      source_dir:\n      # The directory where the Lambda source code is located\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      build_dir:\n      # The directory where the Lambda build artifacts are located\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      artifact_retention_days:\n      # Number of days to retain the artifact\n      #\n      # Type: number\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/lambda-build-node/#example","title":"Example","text":"<pre><code>on: [push, pull_request]\njobs:\n  build:\n    uses: ./.github/workflows/lambda-build-node.yaml\n    with:\n      node_version: \"20\"\n      source_dir: \"src\"\n      build_dir: \"dist\"\n      artifact_retention_days: 5\n</code></pre>"},{"location":"workflows/lambda-build-node/#faq","title":"FAQ","text":"<p>Q: How do I specify the Node.js version?</p> <p>A: The Node.js version is specified using the node_version input. By default, it uses version 20.</p> <p>Q: How do I specify the source directory?</p> <p>A: The source directory is specified using the source_dir input. By default, it is set to src.</p> <p>Q: How do I specify the build directory?</p> <p>A: The build directory is specified using the build_dir input. By default, it is set to dist.</p> <p>Q: How do I specify the artifact retention days?</p> <p>A: The number of days to retain the artifact is specified using the artifact_retention_days input. By default, it is set to 5 days.</p>"},{"location":"workflows/lambda-nodejs/","title":"Build NodeJS Lambda","text":""},{"location":"workflows/lambda-nodejs/#build-nodejs-lambda","title":"Build NodeJS Lambda","text":""},{"location":"workflows/lambda-nodejs/#description","title":"Description","text":"<p>Simple workflow to build a NodeJS Lambda function and upload the artifact to the GitHub artifact store.</p> <p>All packages defined in the <code>package.json</code> file will be installed and packaged into a zip file.</p>"},{"location":"workflows/lambda-nodejs/#inputs","title":"Inputs","text":"name description type required default <code>node_version</code> <p>NodeJS version</p> <code>string</code> <code>false</code> <code>20</code> <code>source_dir</code> <p>Directory of the Lambda source code</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>gh_artifact_name</code> <p>Name of the artifact to upload</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_path</code> <p>A file, directory or wildcard pattern that describes what to upload</p> <code>string</code> <code>false</code> <code>**/lambda.zip</code> <code>gh_artifact_retention_days</code> <p>Number of days to retain the artifact</p> <code>number</code> <code>false</code> <code>30</code>"},{"location":"workflows/lambda-nodejs/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-nodejs.yaml@v2\n    with:\n      node_version:\n      # NodeJS version\n      #\n      # Type: string\n      # Required: false\n      # Default: 20\n\n      source_dir:\n      # Directory of the Lambda source code\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      gh_artifact_name:\n      # Name of the artifact to upload\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_path:\n      # A file, directory or wildcard pattern that describes what to upload\n      #\n      # Type: string\n      # Required: false\n      # Default: **/lambda.zip\n\n      gh_artifact_retention_days:\n      # Number of days to retain the artifact\n      #\n      # Type: number\n      # Required: false\n      # Default: 30\n</code></pre>"},{"location":"workflows/lambda-nodejs/#example","title":"Example","text":"<pre><code>name: Build\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-nodejs.yaml@v1\n    with:\n      node_version: \"20\"\n      source_dir: src/lambda\n</code></pre>"},{"location":"workflows/lambda-nodejs/#faq","title":"FAQ","text":""},{"location":"workflows/lambda-python/","title":"Build Python Lambda","text":""},{"location":"workflows/lambda-python/#build-python-lambda","title":"Build Python Lambda","text":""},{"location":"workflows/lambda-python/#description","title":"Description","text":"<p>Simple workflow to prepare a zip file with the python code an dependent libraries defined in <code>requirements.txt</code>. The zip file will be saved as a github artifact.</p> <p>Usefull to deploy an AWS lambda function or layer.</p>"},{"location":"workflows/lambda-python/#inputs","title":"Inputs","text":"name description type required default <code>python_version</code> <p>Python version. Check https://github.com/actions/setup-python for valid values</p> <code>string</code> <code>false</code> <code>3.12</code> <code>source_dir</code> <p>Directory of the Python source code. Should contain the requirements.txt file</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>zip_filename</code> <p>The zip file to create. It's relativ to the repository root</p> <code>string</code> <code>false</code> <code>python_package.zip</code> <code>gh_artifact_name</code> <p>Name of the artifact to upload</p> <code>string</code> <code>true</code> <code>\"\"</code> <code>gh_artifact_retention_days</code> <p>Number of days to retain the artifact</p> <code>number</code> <code>false</code> <code>30</code>"},{"location":"workflows/lambda-python/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-python.yaml@v2\n    with:\n      python_version:\n      # Python version. Check https://github.com/actions/setup-python for valid values\n      #\n      # Type: string\n      # Required: false\n      # Default: 3.12\n\n      source_dir:\n      # Directory of the Python source code. Should contain the requirements.txt file\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      zip_filename:\n      # The zip file to create. It's relativ to the repository root\n      #\n      # Type: string\n      # Required: false\n      # Default: python_package.zip\n\n      gh_artifact_name:\n      # Name of the artifact to upload\n      #\n      # Type: string\n      # Required: true\n      # Default: \"\"\n\n      gh_artifact_retention_days:\n      # Number of days to retain the artifact\n      #\n      # Type: number\n      # Required: false\n      # Default: 30\n</code></pre>"},{"location":"workflows/lambda-python/#example","title":"Example","text":"<pre><code>name: Build\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    uses: dnd-it/github-workflows/.github/workflows/lambda-python.yaml@v2\n    with:\n      python_version: \"3.12\"\n      source_dir: lambdas/first_lambda\n      zip_filename: first_lambda.zip\n      gh_artifact_name: first_lambda\n</code></pre>"},{"location":"workflows/lambda-python/#faq","title":"FAQ","text":""},{"location":"workflows/tf-apply/","title":"Terraform Apply","text":""},{"location":"workflows/tf-apply/#terraform-apply","title":"Terraform Apply","text":""},{"location":"workflows/tf-apply/#description","title":"Description","text":"<p>This workflow applies the Terraform configuration.</p>"},{"location":"workflows/tf-apply/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>The AWS account ID.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>The AWS region.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>The name of the role to assume with OIDC.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_path</code> <p>Path to download artifacts to. If unset, default action workspace is used. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_name</code> <p>Name of the artifact to download. If only 'ghartifactpath' is set, then all artifacts are downloaded. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_checkout_ref</code> <p>The branch, tag or SHA to checkout.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_pattern</code> <p>A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_merge_multiple</code> <p>When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.</p> <code>boolean</code> <code>false</code> <code>\"\"</code> <code>tf_dir</code> <p>Path to the Terraform root module to apply.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_configs</code> <p>ist of Terraform backend config values, one per line.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_config_files</code> <p>List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_var_files</code> <p>List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_vars</code> <p>Variables to set for the Terraform plan. This should be valid Terraform syntax.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_pre_run</code> <p>Command to run before Terraform is executed.</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/tf-apply/#outputs","title":"Outputs","text":"name description <code>tf_outputs</code> <p>List of Terraform outputs captured.</p>"},{"location":"workflows/tf-apply/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/tf-apply.yaml@v2\n    with:\n      environment:\n      # Environment to deploy.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # The AWS account ID.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # The AWS region.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # The name of the role to assume with OIDC.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_path:\n      # Path to download artifacts to. If unset, default action workspace is used. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_name:\n      # Name of the artifact to download. If only 'gh_artifact_path' is set, then all artifacts are downloaded. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_checkout_ref:\n      # The branch, tag or SHA to checkout.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_pattern:\n      # A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_merge_multiple:\n      # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: \"\"\n\n      tf_dir:\n      # Path to the Terraform root module to apply.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_configs:\n      # ist of Terraform backend config values, one per line.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_config_files:\n      # List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_var_files:\n      # List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_vars:\n      # Variables to set for the Terraform plan. This should be valid Terraform syntax.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_pre_run:\n      # Command to run before Terraform is executed.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/tf-apply/#example","title":"Example","text":""},{"location":"workflows/tf-apply/#faq","title":"FAQ","text":""},{"location":"workflows/tf-cleanup/","title":"Terraform Preview Cleanup","text":""},{"location":"workflows/tf-cleanup/#terraform-preview-cleanup","title":"Terraform Preview Cleanup","text":""},{"location":"workflows/tf-cleanup/#description","title":"Description","text":"<p>This workflow cleans up the Terraform preview deployments.</p>"},{"location":"workflows/tf-cleanup/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>The AWS account ID.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>The AWS region.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>The name of the role to assume with OIDC.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_checkout_ref</code> <p>The branch, tag or SHA to checkout.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_dir</code> <p>Terraform directory</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_configs</code> <p>Terraform backend config cli arguments</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_config_files</code> <p>List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_var_files</code> <p>New line separated list of terraform variable files</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_vars</code> <p>New line separated list of terraform variables</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_pre_run</code> <p>Command to run before Terraform is executed.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_workspace</code> <p>Terraform workspace</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/tf-cleanup/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/tf-cleanup.yaml@v2\n    with:\n      environment:\n      # Environment to deploy\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # The AWS account ID.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # The AWS region.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # The name of the role to assume with OIDC.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_checkout_ref:\n      # The branch, tag or SHA to checkout.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_dir:\n      # Terraform directory\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_configs:\n      # Terraform backend config cli arguments\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_config_files:\n      # List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_var_files:\n      # New line separated list of terraform variable files\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_vars:\n      # New line separated list of terraform variables\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_pre_run:\n      # Command to run before Terraform is executed.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_workspace:\n      # Terraform workspace\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/tf-cleanup/#example","title":"Example","text":""},{"location":"workflows/tf-cleanup/#faq","title":"FAQ","text":""},{"location":"workflows/tf-destroy/","title":"Terraform Destroy","text":""},{"location":"workflows/tf-destroy/#terraform-destroy","title":"Terraform Destroy","text":""},{"location":"workflows/tf-destroy/#description","title":"Description","text":"<p>This workflow destroys Terraform resources.</p>"},{"location":"workflows/tf-destroy/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>The AWS account ID.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>The AWS region.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>The name of the role to assume with OIDC.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_checkout_ref</code> <p>The branch, tag or SHA to checkout.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_dir</code> <p>Path to the Terraform root module to apply.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_configs</code> <p>List of Terraform backend config values, one per line.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_config_files</code> <p>List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_var_files</code> <p>List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_vars</code> <p>Variables to set for the Terraform plan. This should be valid Terraform syntax.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_pre_run</code> <p>Command to run before Terraform is executed.</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/tf-destroy/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/tf-destroy.yaml@v2\n    with:\n      environment:\n      # Environment to deploy.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # The AWS account ID.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # The AWS region.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # The name of the role to assume with OIDC.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_checkout_ref:\n      # The branch, tag or SHA to checkout.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_dir:\n      # Path to the Terraform root module to apply.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_configs:\n      # List of Terraform backend config values, one per line.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_config_files:\n      # List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_var_files:\n      # List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_vars:\n      # Variables to set for the Terraform plan. This should be valid Terraform syntax.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_pre_run:\n      # Command to run before Terraform is executed.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/tf-destroy/#example","title":"Example","text":""},{"location":"workflows/tf-destroy/#faq","title":"FAQ","text":""},{"location":"workflows/tf-feature/","title":"Terraform Preview Deployment","text":""},{"location":"workflows/tf-feature/#terraform-preview-deployment","title":"Terraform Preview Deployment","text":""},{"location":"workflows/tf-feature/#description","title":"Description","text":"<p>This workflow deploys a Terraform configuration to a preview environment.</p>"},{"location":"workflows/tf-feature/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>AWS region</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>The AWS account ID.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_path</code> <p>Path to download artifacts to. If unset, default action workspace is used. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_name</code> <p>Name of the artifact to download. If only 'ghartifactpath' is set, then all artifacts are downloaded. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_checkout_ref</code> <p>The branch, tag or SHA to checkout.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_pattern</code> <p>A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_merge_multiple</code> <p>When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.</p> <code>boolean</code> <code>false</code> <code>\"\"</code> <code>tf_dir</code> <p>Terraform directory</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_configs</code> <p>Terraform backend config cli arguments</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_config_files</code> <p>List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_var_files</code> <p>New line separated list of terraform variable files</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_vars</code> <p>New line separated list of terraform variables</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_pre_run</code> <p>Command to run before Terraform is executed.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_workspace</code> <p>Terraform workspace</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/tf-feature/#outputs","title":"Outputs","text":"name description <code>tf_outputs</code> <p>List of Terraform outputs captured.</p>"},{"location":"workflows/tf-feature/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/tf-feature.yaml@v2\n    with:\n      environment:\n      # Environment to deploy\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # AWS region\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # The AWS account ID.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_path:\n      # Path to download artifacts to. If unset, default action workspace is used. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_name:\n      # Name of the artifact to download. If only 'gh_artifact_path' is set, then all artifacts are downloaded. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_checkout_ref:\n      # The branch, tag or SHA to checkout.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_pattern:\n      # A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_merge_multiple:\n      # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: \"\"\n\n      tf_dir:\n      # Terraform directory\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_configs:\n      # Terraform backend config cli arguments\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_config_files:\n      # List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_var_files:\n      # New line separated list of terraform variable files\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_vars:\n      # New line separated list of terraform variables\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_pre_run:\n      # Command to run before Terraform is executed.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_workspace:\n      # Terraform workspace\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/tf-feature/#example","title":"Example","text":""},{"location":"workflows/tf-feature/#faq","title":"FAQ","text":""},{"location":"workflows/tf-plan/","title":"Terraform Plan","text":""},{"location":"workflows/tf-plan/#terraform-plan","title":"Terraform Plan","text":""},{"location":"workflows/tf-plan/#description","title":"Description","text":"<p>This workflow runs <code>terraform plan</code> and uploads the plan to Github Action summary and creates a PR comment.</p>"},{"location":"workflows/tf-plan/#inputs","title":"Inputs","text":"name description type required default <code>environment</code> <p>Environment to deploy.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_account_id</code> <p>The AWS account ID.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_region</code> <p>The AWS region.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_role_name</code> <p>The name of the role to assume with OIDC.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>aws_oidc_role_arn</code> <p>AWS OIDC IAM role to assume</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_path</code> <p>Path to download artifacts to. If unset, default action workspace is used. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_name</code> <p>Name of the artifact to download. If only 'ghartifactpath' is set, then all artifacts are downloaded. If both 'ghartifactpath' and 'ghartifactname' are unset, artifacts are not downloaded.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_checkout_ref</code> <p>The branch, tag or SHA to checkout.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_pattern</code> <p>A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>gh_artifact_merge_multiple</code> <p>When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.</p> <code>boolean</code> <code>false</code> <code>\"\"</code> <code>gh_comment</code> <p>Whether to post a comment on the PR with the Terraform plan</p> <code>string</code> <code>false</code> <code>changes-only</code> <code>tf_dir</code> <p>Path to the Terraform root module to apply.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_configs</code> <p>List of Terraform backend config values, one per line.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_backend_config_files</code> <p>List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_var_files</code> <p>List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_vars</code> <p>Variables to set for the Terraform plan. This should be valid Terraform syntax.</p> <code>string</code> <code>false</code> <code>\"\"</code> <code>tf_pre_run</code> <p>Command to run before Terraform is executed.</p> <code>string</code> <code>false</code> <code>\"\"</code>"},{"location":"workflows/tf-plan/#usage","title":"Usage","text":"<pre><code>jobs:\n  job1:\n    uses: dnd-it/github-workflows/.github/workflows/tf-plan.yaml@v2\n    with:\n      environment:\n      # Environment to deploy.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_account_id:\n      # The AWS account ID.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_region:\n      # The AWS region.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_role_name:\n      # The name of the role to assume with OIDC.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      aws_oidc_role_arn:\n      # AWS OIDC IAM role to assume\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_path:\n      # Path to download artifacts to. If unset, default action workspace is used. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_name:\n      # Name of the artifact to download. If only 'gh_artifact_path' is set, then all artifacts are downloaded. If both 'gh_artifact_path' and 'gh_artifact_name' are unset, artifacts are not downloaded.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_checkout_ref:\n      # The branch, tag or SHA to checkout.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_pattern:\n      # A glob pattern to the artifacts that should be downloaded. Ignored if name is specified.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      gh_artifact_merge_multiple:\n      # When multiple artifacts are matched, this changes the behavior of the destination directories. If true, the downloaded artifacts will be in the same directory specified by path. If false, the downloaded artifacts will be extracted into individual named directories within the specified path. Optional. Default is 'false'.\n      #\n      # Type: boolean\n      # Required: false\n      # Default: \"\"\n\n      gh_comment:\n      # Whether to post a comment on the PR with the Terraform plan\n      #\n      # Type: string\n      # Required: false\n      # Default: changes-only\n\n      tf_dir:\n      # Path to the Terraform root module to apply.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_configs:\n      # List of Terraform backend config values, one per line.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_backend_config_files:\n      # List of Terraform backend config files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_var_files:\n      # List of tfvars files to use, one per line. Paths should be relative to the GitHub Actions workspace.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_vars:\n      # Variables to set for the Terraform plan. This should be valid Terraform syntax.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n\n      tf_pre_run:\n      # Command to run before Terraform is executed.\n      #\n      # Type: string\n      # Required: false\n      # Default: \"\"\n</code></pre>"},{"location":"workflows/tf-plan/#example","title":"Example","text":""},{"location":"workflows/tf-plan/#faq","title":"FAQ","text":""}]}