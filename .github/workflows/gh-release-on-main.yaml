name: Github Conventional Commit Release

on:
  workflow_call:
    inputs:
      metadata_file:
        description: "File path containing the extra metadata to append to the release version, if not specified the standard semver is applied"
        type: string
        default: ""
      update_version_aliases:
        description: "Automatically update version alias tags (e.g., v1 and v1.2) to point to the latest release."
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Retrieve Merge Commit Message
        id: merge_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -n 1)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Read metadata from file
        id: metadata
        run: |
          if [ -n "${{ inputs.metadata_file }}" ] && [ -f "${{ inputs.metadata_file }}" ]; then
            METADATA_CONTENT=$(cat ${{ inputs.metadata_file }})
            echo "METADATA_CONTENT=$METADATA_CONTENT" >> $GITHUB_ENV
          else
            echo "METADATA_CONTENT=" >> $GITHUB_ENV
          fi
      - name: Determine version increment
        id: version_increment
        run: |
          METADATA_CONTENT=${{ env.METADATA_CONTENT }}

          git fetch --tags
          CURRENT_TAG=$(git tag | sort -V | tail -1)
          if [ "$CURRENT_TAG" = "" ]; then
            CURRENT_TAG="v0.0.1"
          fi

          CURRENT_TAG=$(echo "$CURRENT_TAG" | awk -F'+' '{print $1}')
          MAJOR=$(echo $CURRENT_TAG | awk -F. '{print $1}' | sed 's/v//')
          MINOR=$(echo $CURRENT_TAG | awk -F. '{print $2}')
          PATCH=$(echo $CURRENT_TAG | awk -F. '{print $3}')

          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          if [[ "$COMMIT_MESSAGE" =~ ^feat!: ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" =~ ^feat: ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" =~ ^fix: ]]; then
            PATCH=$((PATCH + 1))
          else
            echo "Nothing to release"
            echo "RELEASE=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ -n "$METADATA_CONTENT" ]; then
            NEW_TAG="v$MAJOR.$MINOR.$PATCH+$METADATA_CONTENT"
          else
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          MAJOR_VERSION="v$MAJOR"
          MINOR_VERSION="v$MAJOR.$MINOR"
          echo "TAG $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "MAJOR_VERSION=$MAJOR_VERSION" >> $GITHUB_ENV
          echo "MINOR_VERSION=$MINOR_VERSION" >> $GITHUB_ENV
          echo "RELEASE=true" >> $GITHUB_OUTPUT

      - name: Release
        if: steps.version_increment.outputs.RELEASE == 'true'
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2
        with:
          tag_name: ${{ steps.version_increment.outputs.NEW_TAG }}
          generate_release_notes: true

      - name: Update major and minor version tags
        if: steps.version_increment.outputs.RELEASE == 'true' && inputs.update_version_aliases
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -fa ${{ env.MAJOR_VERSION }} -m "Update major version tag"
          git push origin ${{ env.MAJOR_VERSION }} --force
          git tag -fa ${{ env.MINOR_VERSION }} -m "Update minor version tag"
          git push origin ${{ env.MINOR_VERSION }} --force
