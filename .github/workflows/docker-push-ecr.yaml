name: Docker Push to ECR

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy"
        type: string
      aws_account_id:
        description: "AWS Account ID"
        type: string
      aws_region:
        description: "AWS Region"
        type: string
      aws_role_name:
        description: "AWS Role Name"
        type: string
      aws_oidc_role_arn:
        description: "AWS OIDC IAM role to assume"
        type: string
      image_name:
        description: "Name of the Docker image to build"
        type: string
      image_tag:
        description: "Tag of the Docker image to build"
        type: string
        default: ${{ github.event.pull_request.head.sha || github.sha }}
      artifact_name:
        description: "Artifact name. If not set, it will be derived from the image name."
        type: string
jobs:
  push:
    name: Push to ECR
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact
        env:
          IMAGE_NAME: ${{ inputs.image_name || vars.image_name || github.event.repository.name}}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: ${{ inputs.artifact_name || env.IMAGE_NAME }}-${{ env.GITHUB_SHA }}
          path: /tmp

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5
        env:
          ROLE_TO_ASSUME: ${{ inputs.aws_oidc_role_arn || vars.aws_oidc_role_arn || format('arn:aws:iam::{0}:role/{1}', inputs.aws_account_id, inputs.aws_role_name) }}
          AWS_REGION: ${{ inputs.aws_region || vars.aws_region || 'eu-central-1' }}
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Sanitize Image Tag
        run: |
          IMAGE_TAG="${{ inputs.image_tag }}"
          IMAGE_TAG="${IMAGE_TAG//\//-}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Tag and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.image_name || vars.image_name || github.event.repository.name}}
          SOURCE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          BRANCH: ${{ github.ref_name }}
          ARTIFACT_NAME: ${{ inputs.artifact_name || inputs.image_name || vars.image_name || github.event.repository.name }}
        run: |
          docker load -i /tmp/$ARTIFACT_NAME.tar
          docker tag $REPOSITORY:$SOURCE_TAG $REGISTRY/$REPOSITORY:$SOURCE_TAG
          docker tag $REPOSITORY:$SOURCE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG

          if [ "$BRANCH" == 'main' ] || [ "$BRANCH" == 'master' ]; then
            docker tag $REPOSITORY:$SOURCE_TAG $REGISTRY/$REPOSITORY:latest
          fi

          docker push --all-tags $REGISTRY/$REPOSITORY
