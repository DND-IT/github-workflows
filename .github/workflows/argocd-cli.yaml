name: ArgoCD CLI

on:
  workflow_call:
    inputs:
      argocd_version:
        description: ArgoCD CLI version to use
        type: string
        default: "latest"
      argocd_architecture:
        description: Architecture for ArgoCD CLI (default is amd64)
        type: string
        default: "amd64"
      argocd_server:
        description: ArgoCD server URL
        type: string
      argocd_grpc_web:
        description: Use gRPC-web for ArgoCD CLI
        type: string
        default: "false"
      argocd_commands:
        description: |
          ArgoCD CLI commands to run. Can be a single command or multiple commands separated by newlines.
          Example: |
            app list
            app get my-app
            app sync my-app --prune
        type: string
        required: true
      pre_run:
        description: Custom commands to run before ArgoCD commands
        type: string
      post_run:
        description: Custom commands to run after ArgoCD commands
        type: string
      working_directory:
        description: Working directory for running commands
        type: string
        default: "."
      runner:
        description: GitHub runner to use
        type: string
        default: "ubuntu-latest"
    secrets:
      argocd_auth_token:
        description: ArgoCD authentication token (as secret)
        required: false

env:
  ARGOCD_VERSION: ${{ inputs.argocd_version }}
  ARGOCD_SERVER: ${{ inputs.argocd_server || vars.argocd_server }}
  ARGOCD_AUTH_TOKEN: ${{ secrets.argocd_auth_token }}

jobs:
  argocd-cli:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Download and install ArgoCD CLI
        run: |
          # Use GitHub CLI with runner token for better rate limits and reliability
          if [ "${{ inputs.argocd_version }}" = "latest" ]; then
            VERSION=$(gh release view --repo argoproj/argo-cd --json tagName --jq '.tagName')
          else
            VERSION=${{ inputs.argocd_version }}
          fi

          echo "Installing ArgoCD CLI version: $VERSION"

          gh release download "$VERSION" \
            --repo argoproj/argo-cd \
            --pattern "argocd-linux-${{ inputs.argocd_architecture }}" \
            --output argocd

          chmod +x argocd
          sudo mv argocd /usr/local/bin/

          # Verify installation
          argocd version --client
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run pre-run commands
        if: inputs.pre_run
        working-directory: ${{ inputs.working_directory }}
        run: ${{ inputs.pre_run }}

      - name: Run ArgoCD commands
        working-directory: ${{ inputs.working_directory }}
        run: |
          set +e  # Disable exit on error so we can handle errors properly

          # Build global flags
          ARGOCD_FLAGS=""
          [[ -n "$ARGOCD_SERVER" ]] && ARGOCD_FLAGS="$ARGOCD_FLAGS --server $ARGOCD_SERVER"
          [[ -n "$ARGOCD_AUTH_TOKEN" ]] && ARGOCD_FLAGS="$ARGOCD_FLAGS --auth-token $ARGOCD_AUTH_TOKEN"
          [[ "${{ inputs.argocd_grpc_web }}" == "true" ]] && ARGOCD_FLAGS="$ARGOCD_FLAGS --grpc-web"

          # Execute commands with proper error handling
          exit_code=0
          while IFS= read -r cmd; do
            # Skip empty lines and whitespace-only lines
            if [[ -n "${cmd// }" ]]; then
              echo "Executing: argocd $cmd $ARGOCD_FLAGS"
              argocd $cmd $ARGOCD_FLAGS
              cmd_exit_code=$?

              if [[ $cmd_exit_code -ne 0 ]]; then
                echo "ERROR: Command failed with exit code $cmd_exit_code"
                exit_code=$cmd_exit_code
              fi
            fi
          done <<< "${{ inputs.argocd_commands }}"

          # Exit with the last error code if any command failed
          exit $exit_code
      - name: Run post-run commands
        if: inputs.post_run
        working-directory: ${{ inputs.working_directory }}
        run: ${{ inputs.post_run }}
