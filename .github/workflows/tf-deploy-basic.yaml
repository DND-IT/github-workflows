on:
  workflow_call:
    inputs:
      aws_account_id:
        description: "The AWS account ID"
        type: string
        required: true
      aws_region:
        description: "The AWS region"
        required: true
        type: string
      aws_role_name:
        description: "The name of the role to assume with OIDC"
        type: string
        required: true
        default: cicd-iac
      environment:
        description: "The environment name"
        type: string
        required: true
      tf_dir:
        description: "The directory where the Terraform files are located"
        type: string
        required: false
        default: .
      tf_feedback:
        description: "Whether to post a comment on the PR with the Terraform plan"
        required: false
        type: boolean
        default: false
      tf_state_bucket:
        description: "The name of the S3 bucket to store the Terraform state"
        required: false
        type: string
      tf_state_key:
        description: "The name of the S3 key to store the Terraform state"
        required: false
        type: string
      tf_var_file:
        description: "The name of the Terraform variable file"
        required: false
        type: string
      tf_version:
        description: "The Terraform version to use"
        type: string
        required: false
        default: 1.5.6

jobs:
  terraform_deployment:
    name: Deployment
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    concurrency:
      group: ${{ inputs.environment }} # ${{ github.head_ref || github.run_id }} # The order is random, so need to find another way to apply in a specific order
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.tf_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role_name }}
          aws-region: ${{ inputs.aws_region }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Init
        id: init
        run: |
          tf_args=""
          if [ "${{ inputs.tf_state_key }}" != "" ] && [ "${{ inputs.tf_state_bucket }}" != "" ]; then
             tf_args='-backend-config=key=${{ inputs.tf_state_key }} -backend-config=bucket=${{ inputs.tf_state_bucket }}'
          fi
          terraform init ${tf_args}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan # TODO discuss artifact topic
        id: plan
        run: |
          tf_args=''
          if [ "${{ inputs.tf_var_file }}" == false ]; then
            tf_args='-var-file="environments/${{ matrix.environment }}.tfvars"'
          fi

          terraform plan \
           -input=false \
           -lock=false \
           -var="environment=${{ inputs.environment }}" \
           -var="github_repo=${{ github.event.repository.name }}" \
           -var="region=${{ inputs.aws_region }}" \
           -out="plan" \
           ${tf_args}

          TERRAFORM_PLAN=$(terraform show -no-color plan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "# Terraform Plan Output: ${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

          echo "$GITHUB_OUTPUT" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false "plan"

      #### It runs even wih tf_feedback == false
      # - uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request' && ${{ inputs.tf_feedback }} == true
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     # TODO discuss how to handle multiple environments and fix inputs
      #     script: |
      #       const environmentString = `Environment: PROD`;
      #       const output = `#### ${environmentString}
      #       * Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       * Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       * Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
      #       * Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`${process.env.PLAN}\`\`\`
      #       </details>
      #       *Pusher: Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      #       const comments = await github.issues.listComments({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         per_page: 100
      #       });
      #       const planComment = comments.data.find(c => c.body.includes(environmentString));
      #       if (planComment) {
      #         await github.issues.updateComment({
      #           issue_number: context.issue.number,
      #           comment_id: planComment.id,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         });
      #       } else {
      #         await github.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         });
      #       }
