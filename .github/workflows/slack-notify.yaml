name: Slack Notification

on:
  workflow_call:
    secrets:
      slack_bot_token:
        description: "Slack Bot Token for authentication"
        required: true
    inputs:
      channel:
        description: "Slack channel ID or name to send notification to"
        type: string
        required: true
      notification_title:
        description: "Title of the notification (shown in header)"
        type: string
        required: true
      notification_message:
        description: "Main notification message text"
        type: string
      status:
        description: "Overall status (success, failure, partial, warning, info). Used for color and emoji if not overridden."
        type: string
        default: "info"
      color:
        description: "Custom hex color for notification (e.g., #36a64f). Overrides status-based color."
        type: string
      emoji:
        description: "Custom emoji for notification. Overrides status-based emoji."
        type: string
      job_results:
        description: "JSON array of job results: [{\"name\": \"Job Name\", \"result\": \"success\"}]. Max 10 fields due to Slack limits."
        type: string
      additional_fields:
        description: "JSON array of custom fields: [{\"name\": \"Field Name\", \"value\": \"Field Value\"}]. Combined with job_results, max 10 total."
        type: string
      include_workflow_link:
        description: "Include link to workflow run"
        type: boolean
        default: true
      include_triggered_by:
        description: "Include information about who/what triggered the workflow"
        type: boolean
        default: true
      custom_blocks:
        description: "JSON array of custom Slack blocks to append to the message"
        type: string
      thread_ts:
        description: "Thread timestamp to reply in a thread"
        type: string
      environment:
        description: "Environment name (optional, added as a field if provided)"
        type: string

jobs:
  notify:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Determine Notification Settings
        id: settings
        run: |
          STATUS="${{ inputs.status }}"

          # Set default colors and emojis based on status
          case "$STATUS" in
            success)
              DEFAULT_COLOR="#36a64f"
              DEFAULT_EMOJI="✅"
              ;;
            failure)
              DEFAULT_COLOR="#FF0000"
              DEFAULT_EMOJI="❌"
              ;;
            partial|warning)
              DEFAULT_COLOR="#FFA500"
              DEFAULT_EMOJI="⚠️"
              ;;
            info)
              DEFAULT_COLOR="#0066CC"
              DEFAULT_EMOJI="ℹ️"
              ;;
            *)
              DEFAULT_COLOR="#808080"
              DEFAULT_EMOJI="⚪"
              ;;
          esac

          # Use custom values if provided, otherwise use defaults
          COLOR="${{ inputs.color }}"
          EMOJI="${{ inputs.emoji }}"

          echo "color=${COLOR:-$DEFAULT_COLOR}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI:-$DEFAULT_EMOJI}" >> $GITHUB_OUTPUT

          # Format the message
          MESSAGE="${{ inputs.notification_message }}"
          if [ -z "$MESSAGE" ]; then
            MESSAGE="${{ inputs.notification_title }}"
          fi
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Build Slack Payload
        id: payload
        run: |
          # Build payload using jq to ensure proper JSON formatting
          JOB_RESULTS='${{ inputs.job_results }}'
          ADDITIONAL_FIELDS='${{ inputs.additional_fields }}'
          CUSTOM_BLOCKS='${{ inputs.custom_blocks }}'

          # Start with base structure
          jq -n \
            --arg channel "${{ inputs.channel }}" \
            --arg text "${{ steps.settings.outputs.emoji }} ${{ steps.settings.outputs.message }}" \
            --arg emoji "${{ steps.settings.outputs.emoji }}" \
            --arg title "${{ inputs.notification_title }}" \
            '{
              channel: $channel,
              text: $text,
              blocks: [
                {
                  type: "header",
                  text: {
                    type: "plain_text",
                    text: ($emoji + " " + $title),
                    emoji: true
                  }
                }
              ]
            }' > /tmp/slack-payload.json

          # Add fields section if needed
          FIELDS_ARRAY="[]"

          # Process job results
          if [ -n "$JOB_RESULTS" ] && [ "$JOB_RESULTS" != "null" ]; then
            FIELDS_ARRAY=$(echo "$JOB_RESULTS" | jq -r '[.[] | {type: "mrkdwn", text: ("*" + .name + ":*\n" + .result)}]')
          fi

          # Process additional fields
          if [ -n "$ADDITIONAL_FIELDS" ] && [ "$ADDITIONAL_FIELDS" != "null" ]; then
            ADDITIONAL=$(echo "$ADDITIONAL_FIELDS" | jq -r '[.[] | {type: "mrkdwn", text: ("*" + .name + ":*\n" + .value)}]')
            FIELDS_ARRAY=$(echo "$FIELDS_ARRAY" | jq --argjson add "$ADDITIONAL" '. + $add')
          fi

          # Add environment field if provided
          if [ -n "${{ inputs.environment }}" ]; then
            ENV_FIELD=$(jq -n --arg env "${{ inputs.environment }}" '{type: "mrkdwn", text: ("*Environment:*\n" + $env)}')
            FIELDS_ARRAY=$(echo "$FIELDS_ARRAY" | jq --argjson field "$ENV_FIELD" '. + [$field]')
          fi

          # Add triggered by field if requested
          if [ "${{ inputs.include_triggered_by }}" == "true" ]; then
            TRIGGER_FIELD=$(jq -n --arg event "${{ github.event_name }}" '{type: "mrkdwn", text: ("*Triggered By:*\n" + $event)}')
            FIELDS_ARRAY=$(echo "$FIELDS_ARRAY" | jq --argjson field "$TRIGGER_FIELD" '. + [$field]')
          fi

          # Add fields section if we have any fields
          if [ "$(echo "$FIELDS_ARRAY" | jq 'length')" -gt 0 ]; then
            FIELDS_BLOCK=$(jq -n --argjson fields "$FIELDS_ARRAY" '{type: "section", fields: $fields}')
            jq --argjson block "$FIELDS_BLOCK" '.blocks += [$block]' /tmp/slack-payload.json > /tmp/slack-payload-tmp.json
            mv /tmp/slack-payload-tmp.json /tmp/slack-payload.json
          fi

          # Add workflow link if requested
          if [ "${{ inputs.include_workflow_link }}" == "true" ]; then
            LINK_BLOCK=$(jq -n \
              --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              '{
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: ("<" + $url + "|View Workflow Run>")
                }
              }')
            jq --argjson block "$LINK_BLOCK" '.blocks += [$block]' /tmp/slack-payload.json > /tmp/slack-payload-tmp.json
            mv /tmp/slack-payload-tmp.json /tmp/slack-payload.json
          fi

          # Add custom blocks if provided
          if [ -n "$CUSTOM_BLOCKS" ] && [ "$CUSTOM_BLOCKS" != "null" ]; then
            jq --argjson blocks "$CUSTOM_BLOCKS" '.blocks += $blocks' /tmp/slack-payload.json > /tmp/slack-payload-tmp.json
            mv /tmp/slack-payload-tmp.json /tmp/slack-payload.json
          fi

          # Add thread_ts if provided
          if [ -n "${{ inputs.thread_ts }}" ]; then
            jq --arg ts "${{ inputs.thread_ts }}" '.thread_ts = $ts' /tmp/slack-payload.json > /tmp/slack-payload-tmp.json
            mv /tmp/slack-payload-tmp.json /tmp/slack-payload.json
          fi

          # Output for verification
          echo "Payload preview:"
          jq . /tmp/slack-payload.json | head -30

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.slack_bot_token }}
          payload-file-path: /tmp/slack-payload.json
